{
  "hash": "a2da4ff288ea8d5d8f31f2d0f7eb3e62",
  "result": {
    "markdown": "---\ntitle: 9. Unrelated-samples t-test and Power\nsubtitle: Written by Tom Beesley & John Towse\norder: 9\n---\n\n\n# Lectures\n\nWatch Lecture [Part 1](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2023089)\n\nWatch Lecture [Part 2](https://modules.lancaster.ac.uk/mod/url/view.php?id=1904989)\n\nWatch Lecture [Part 3](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2023091)\n\nWatch Lecture [Part 4](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2023096)\n\nDownload the lecture slides [here](data/Week_9/Lecture Week 9.pptx)\n\n## Reading\n\n[Chapter 14](https://modules.lancaster.ac.uk/mod/url/view.php?id=2023094) of Howell\n\n\n\n\n\n\n\n## Pre-lab work: online tutorial\n\n**Online tutorial**: You must make every attempt to complete this before the lab! To access the [**pre-lab tutorial click here**](https://ma-rconnect.lancs.ac.uk/Week_9_LabPrep){target=\"_blank\"} (on campus, or VPN required)\n\n**Getting ready for the lab class**\n\nCreate a folder for Week 9. and download the [week_9.zip](data/Week_9/week_9.zip) file and upload it into this new folder in RStudio Server.\n\n## RStudio tasks\n\n### Exploring the data\n\nIn this class we will be exploring some data on people's estimations on aspects of the UK population. We asked people 4 different questions:\n\n> Out of every 100 people, about how many do you think are:\n\n> 1.  Christian?\n> 2.  Muslim?\n> 3.  Over the age of 65?\n\nWe also asked a related question about immigration:\n\n> What percentage of the UK population do you think are immigrants to this country? (i.e. not born in UK)\n\n1.  Read in the data \"data_wk9.csv\" using `read_csv()`.\n\n2.  Take a look at the summary statistics for all of the columns in our data using `summary()`\n\n3.  At this stage you could try using `ggplot()` with `geom_histogram()` (hint: not sure? look at last week) or `geom_density()` to explore the different columns.\n\n4.  You may be tempted at this stage to apply the `filter()` commands to remove any outliers. If so, yes, that's entirely sensible. But note that we are going to remove outliers a little further into our tasks after we've first done some visualisation.\n\n### Visualising relationships in the data\n\nTo what extent are people's estimations of these population parameters related? Let's look at this by plotting these data as `geom_point()`:\n\n1.  Complete the code to add one numeric column in the data to x and another numeric column to y. You can pick any of the columns you like, but it's important that you understand what research question you are asking with your choice. For example, you might be asking \"Do people who estimate there are more Christians in the population also think there are more people over the age of 65?\"\n\n2.  Note the general pattern in the data. Is there a *postive relationship*: do people who give high estimations for one variable tend to give high estimations for the other variable? Or is there a *negative relationship*: do people who give high estimations for one variable tend to give lower estimations for the other variable? Or is there no discernable relationship at all?\n\n3.  Copy the code and edit it to explore relationships between the other numeric variables, each time noting the research question you are asking, and discussing on your table what kind of relationship you can see in the data.\n\n### Using z-scores to remove outliers\n\n1.  You may have noticed that there are some fairly extreme values in some of these numeric estimations of the population. As we've discussed in previous weeks, these outlier values can be problematic when we run our statistical tests, so (like last week) we probably want to control their influence by removing them. As you saw in your online tutorial, we can convert the data to z scores, and then remove z values above and below certain values.\n\n2.  Let's create a \"z-transform column\" called *z_imm* for the estimates of the percentage of immigrants. Complete the code you have been given by adding the relevant variable (column) name to the code. You may want to create a new data object at this point.\n\n3.  View the new data object to check this column has been created correctly. Like in the online tutorial, it would be a good idea to calculate some descriptive statistics for these new columns to check it conforms to what we know about z-scores (e.g., `mean()` should be very close to 0, `sd()` = 1). Note, if you want to change the output in r from scientific notation to non-scientific notation, you can run the command `options(scipen=999)`.\n\n4.  We know from our lectures on the z distribution that values of greater than 2 (or less than -2) reflect around 5% of the distribution, and values greater than 3 (or less than -3) represent less than 1% of the distribution:\n\n![](images/wk9/z_score_figure.png)\n\n5.  Let's consider an outlier any value that has a z of 2.5 (a conventional cutoff). Plot a histogram of the *z_imm* column in order to inspect whether there are data that are above 2.5 or below -2.5.\n\n6.  Add a filter command to remove the values in the *z_imm* column are greater than 2.5 or less than -2.5.\n\n## Unrelated samples t-test\n\nWe have also included a categorical variable in our data this week, which is one you have seen before in our analysis classes: the home location in the UK of the respondent, `home_location_in_UK`. For this data object we have included only those responses from those people from the \"North\" (NW and NE) and those from the \"South\" (SW and SE). Other respondents from elsewhere have been removed from the data. We can therefore look at whether people's home location determines their population estimations.\n\n1.  First we will look at the mean population estimations, split by home location. To do this, complete the `group_by()` and `summarise()` commands to give the mean estimates of the proportion of muslims in the population by home location. You don't need to edit the `N = n()` line - this provides the number of participants at each level of the *home_location_in_UK* variable.\n\n2.  What do the means suggest? Do people in the North and South give different estimations?\n\n3.  Let's test if these differences are real. First, it is worth noting that many more respondents originate from the North than from the South (see the *N* column in the summary). We have unequal sample sizes, and potentially unequal variances. Run the `var.test()` code to check if the variances of the two samples are similar (homogeneity of variance). If this test produces a p value less that .05, then the variances in the two samples are unequal. That will have consequences for how we run the `t-test()` in the next step.\n\n4.  Now let's run the t-test. This week we are comparing data from different samples of participants (those who are from the North and South). We need to tell the t-test that the data are NOT paired (`paired = FALSE`). The result of the `var.test()` in the last step will tell you whether the `var.equal` value should be `TRUE` or `FALSE`. Set `var.equal = FALSE` or `var.equal = TRUE` depending on whether the variances are equal. When you're happy with the parameters, run the t-test. What result did you get and what does this mean? Discuss this with your table, or with the staff in the lab.\n\n5.  In that t-test we looked at the *pop_est_muslim* variable, but we can do this test for all of our population estimates. Copy the code to run another `var.test()` and `t.test()`, for the *pop_est_christian* variable. Note the t and p values; What do these tell us about the relationship between music preference and social media use? You can also run two further tests on the other population estimations.\n\n## Power and effect size (d) calculations\n\n1.  We saw in last week's lab tasks that there was a significant effect in our Stroop task data: participants were faster to say the colour names of the compatible list compared to the incompatible list (there were significant differences with the control list too). We will now use these data to calculate an **effect size** (*Cohen's d*) for the t-statistic that we observed in that test.\n\n2.  Import the stroop data. We have reduced the data down to just the *compatible* and *incompatible* conditions.\n\n3.  Run the `cohens_d()` code to calculate the effect size, which is reported as *effsize*. You can ignore any negative sign, taking note of the absolute value.\n\n4.  We already know that this large effect size was significant with our large sample of participants. What might we have expected with a much smaller sample size? Use the `pwr.t.test()` function to add in the effect size that you calculated (Cohen's d) and set the *N* to 20. What **power** would we have achieved with this sample size, to detect this large effect? Discuss with your table, or staff, what this power means.\n\n5.  Let's say we wanted our next experiment to have an 80% chance of finding an effect at least as large as the one we found. Complete the `pwr.t.test()` function to work out the minimum sample size we would need to achieve power of .8, with this effect size.\n\n6.  Let's say we are looking to run a new experiment in which we give people a stressful task to complete simultaneously. We will ask them to put their hands in a bucket of ice cold water while doing the Stroop task (this is a real \"stressor task\" people use!). We are unsure of what consequence this will have for our effect size, but we want to estimate the effect size that could be detected in our experiment. We decide to run 40 participants, and want to achieve a power of .90 (90% chance to find an effect at least this large). What is the minimum effect size we could hope to detect under these conditions?\n\n## Week 9 Quiz\n\nYou can access a set of quiz questions related to this week [here.](https://ma-rconnect.lancs.ac.uk/PSYC121_2022_Week_9_quiz/){target=\"_blank\"}\n",
    "supporting": [
      "Week9_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}