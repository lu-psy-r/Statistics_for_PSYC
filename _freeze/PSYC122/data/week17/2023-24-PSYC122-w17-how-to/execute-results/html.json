{
  "hash": "8a9ed465f0ade813bc9fcac591dab85a",
  "result": {
    "markdown": "---\ntitle: \"2023-24-PSYC122-w17-how-to\"\nauthor: Rob Davies\ndate: \"2024-02-26\"\noutput: word_document\n---\n\n\n\n\n\n# Introduction\n\n\nIn Week 17, we aim to *further* develop skills in visualizing and testing the \nassociations between variables in psychological data.\n\nWe do this to learn how to answer research questions like:\n\n1. What person attributes predict success in understanding?\n2. Can people accurately evaluate whether they correctly understand written \nhealth information?\n\nThese kinds of research questions can be answered using methods like the **linear model**.\n\nWhen we do these analyses, we need to think about how we report the results:\n\n- we usually need to report information about the kind of model we specify;\n- and we will need to report the nature of the association estimated in our model;\n- we usually need to decide, is the association significant?\n- does the association reflect a positive or negative relationship between outcome \nand predictor?\n- and is the association we see in our sample data relatively strong or weak?\n\nWe will consolidate and extend learning on data visualization:\n\n- focusing on how we edit ggplot() code to produce professional looking plots.\n\n## Naming things\n\nI will format dataset names like this: \n\n- `study-one-general-participants.csv`\n\nI will also format variable (data column) names like this: `variable` \n\nI will also format value or other data object (e.g. cell value) names like this: `studyone`\n\nI will format functions and library names like this: e.g. function `ggplot()` or e.g. library `{tidyverse}`.\n\n## The data we will be using\n\nIn this activity, we use data from a 2020 study of the response\nof adults from a UK national sample to written health information:\n\n- `study-one-general-participants.csv`\n\n\n## Step 1: Set-up\n\n\nTo begin, we set up our environment in R.\n\n\n### Task 1 -- Run code to empty the R environment\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-1_9aaf3c31df23bed42fc2d3c9e7275cfd'}\n\n```{.r .cell-code}\nrm(list=ls())                            \n```\n:::\n\n\n\n### Task 2 -- Run code to load relevant libraries\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-2_9a339854c92eec719c57d6e80ccdef77'}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.1.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n\n## Step 2: Load the data\n\n\n### Task 3 -- Read in the data file we will be using\n\nThe data file is called:\n\n- `study-one-general-participants.csv`\n\nUse the `read_csv()` function to read the data file into R:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-3_cc0adbd10511942c4aab2ced0cb21660'}\n\n```{.r .cell-code}\nstudy.one.gen <- read_csv(\"study-one-general-participants.csv\")  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 169 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): participant_ID, study, GENDER, EDUCATION, ETHNICITY\ndbl (7): mean.acc, mean.self, AGE, SHIPLEY, HLVA, FACTOR3, QRITOTAL\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nWhen you read the data file in, give the data object you create a distinct name \ne.g. `study.one.gen`.\n\n\n### Task 4 -- Inspect the data file\n\nUse the `summary()` or `head()` functions to take a look.\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-4_696a7cec35ef3fb82ae5298bc050ceb1'}\n\n```{.r .cell-code}\nhead(study.one.gen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  participant_ID mean.acc mean.self study     AGE SHIPLEY  HLVA FACTOR3 QRITOTAL\n  <chr>             <dbl>     <dbl> <chr>   <dbl>   <dbl> <dbl>   <dbl>    <dbl>\n1 studyone.1         0.49      7.96 studyo…    34      33     7      53       11\n2 studyone.10        0.85      7.28 studyo…    25      33     7      60       11\n3 studyone.100       0.82      7.36 studyo…    43      40     8      46       12\n4 studyone.101       0.94      7.88 studyo…    46      33    11      51       15\n5 studyone.102       0.58      6.96 studyo…    18      32     3      51       12\n6 studyone.103       0.84      7.88 studyo…    19      37    13      45       19\n# ℹ 3 more variables: GENDER <chr>, EDUCATION <chr>, ETHNICITY <chr>\n```\n:::\n\n```{.r .cell-code}\nsummary(study.one.gen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n participant_ID        mean.acc        mean.self        study          \n Length:169         Min.   :0.3600   Min.   :3.440   Length:169        \n Class :character   1st Qu.:0.7600   1st Qu.:6.080   Class :character  \n Mode  :character   Median :0.8400   Median :7.080   Mode  :character  \n                    Mean   :0.8163   Mean   :6.906                     \n                    3rd Qu.:0.9000   3rd Qu.:7.920                     \n                    Max.   :0.9900   Max.   :9.000                     \n      AGE           SHIPLEY           HLVA           FACTOR3     \n Min.   :18.00   Min.   :23.00   Min.   : 3.000   Min.   :34.00  \n 1st Qu.:24.00   1st Qu.:33.00   1st Qu.: 7.000   1st Qu.:46.00  \n Median :32.00   Median :35.00   Median : 9.000   Median :51.00  \n Mean   :34.87   Mean   :34.96   Mean   : 8.905   Mean   :50.33  \n 3rd Qu.:42.00   3rd Qu.:38.00   3rd Qu.:10.000   3rd Qu.:55.00  \n Max.   :76.00   Max.   :40.00   Max.   :14.000   Max.   :63.00  \n    QRITOTAL        GENDER           EDUCATION          ETHNICITY        \n Min.   : 6.00   Length:169         Length:169         Length:169        \n 1st Qu.:12.00   Class :character   Class :character   Class :character  \n Median :13.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :13.36                                                           \n 3rd Qu.:15.00                                                           \n Max.   :19.00                                                           \n```\n:::\n:::\n\n\nNotice that:\n\n- `head()` will give you the top few rows of any dataset you have read into R.\n- `summary()` will give you either descriptive statistics for variable columns\nclassified as numeric or will tell you that columns in the dataset are not numeric.\n\nPay attention to what you see, for the numeric variables, in the information about \nminimum (Min.) and maximum (Max.) values. You will use this informatio later when\nyou engage in data visualization.\n\n\n## Step 3: Use histograms to examine the distributions of variables\n\n\n### Revise: practice to strengthen skills\n\n\n### Task 5 -- Draw histograms to examine the distributions of variables\n### hint: Task 5 \n\nUse `ggplot()` with `geom_histogram()`.\n\nWhen we create a plot, we take things step-by-step.\n\nHere's an example you have seen before: run the lines of code and see the result in the\n`Plots` window in `R-Studio`.\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-5_8665aaeedb42063063f17436a9ee7884'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = mean.acc)) + \n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThese are the steps, set out one at a time:\n\n1. `ggplot(...)` you tell R you want to make a plot using the `ggplot()` function\n2. `ggplot(data = study.one.gen ...)` you tell R you want to make a plot with the\n`study.two.gen` data\n3. `ggplot(..., aes(x = mean.acc))` you tell R that you want to make a plot with \nthe variable `mean.acc` -- here, you specify the aesthetic mapping, `x = mean.acc`\n4. `ggplot(...) + geom_histogram()` you tell R you want to plot values of `mean.acc` \nas a histogram\n\nNotice that the code works the same whether we have the different bits of code on the same\nline or in a series of lines.\n\n\n### Revise: make sure you are confident about doing these things\n\n\n### Task 6 -- Practice editing the appearance of a histogram plot step-by-step\n\nWe are going to revise editing:\n\n1. The appearance of the bars using `binwidth`;\n2. The colour of the background using `theme_bw()`;\n3. The appearance of the labels using `labs()`.\n\nWe proceed to revise:\n\n#### Task 6.1 -- the appearance of the bars using `binwidth`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-6_6530335f38a82da8a3ccf108eebb1ffa'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY)) + \n  geom_histogram(binwidth = 2)\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n#### Task 6.2 -- then the colour of the background using `theme_bw()`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-7_8bcadd2985d13950a827f8479d1d6584'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY)) + \n  geom_histogram(binwidth = 2) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n#### Task 6.3 -- then the appearance of the labels using `labs()`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-8_09348b3b051e853c03e251a31c5ccc95'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY)) + \n  geom_histogram(binwidth = 2) +\n  theme_bw() +\n  labs(x = \"mean accuracy\", y = \"frequency count\")\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### Introduce: make some new moves\n\n\n#### Task 6.4. Now add an edit by setting the x-axis limits using `x.lim()`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-9_9d20dd70033b200cc97f7a45929b09b9'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY)) + \n  geom_histogram(binwidth = 2) +\n  theme_bw() +\n  labs(x = \"Vocabulary (SHIPLEY)\", y = \"frequency count\") +\n  xlim(0,40)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### Task 6.5. Now add a vertical line to show the mean value:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-10_7a706463cbf29e4558d627592074a42e'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY)) + \n  geom_histogram(binwidth = 2) +\n  theme_bw() +\n  labs(x = \"Vocabulary (SHIPLEY)\", y = \"frequency count\") +\n  xlim(0,40) +\n  geom_vline(xintercept = mean(study.one.gen$SHIPLEY), colour = \"red\", size = 1.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### Why are we learning how to do this?\n\nIt is often useful to define the limits on the x-axis and on the y-axis:\n\n- Because we want to show the audience where the sample values are distributed \ncompared to where they *could* be distributed, given the measure.\n- This makes sense e.g. if you want to see the relative age distribution of a sample\ncompared to the population.\n- Because we want plots, shown side by side to be directly comparable.\n- And because we want to give the audience a more accurate picture of the data.\n\nYou can see ggplot reference information on setting limits here:\n\n<https://ggplot2.tidyverse.org/reference/lims.html>\n\nNotice that we used the `geom_vline()` in:\n\n```{}\ngeom_vline(xintercept = mean(study.one.gen$SHIPLEY), colour = \"red\", size = 1.5)\n```\n\n- to plot a vertical line at the location on the x-axis we define.\n\nWe do this in the steps:\n\n1. `geom_vline(...)` draw a vertical line;\n2. `...xintercept...` draw the line so it hits the x-axis (intercepts the x-axis);\n3. `...xintercept = mean(study.one.gen$SHIPLEY...` defined by the mean of the variable\n`mean(study.one.gen$SHIPLEY)`;\n4. `...colour = \"red\", size = 1.5...` make the line red and make the line one and a half times thicker than the default line thickness.\n\nSee ggplot() reference information for this new geom is here:\n\n<https://ggplot2.tidyverse.org/reference/geom_abline.html>\n\n\n## Step 4: Now draw scatterplots to examine associations between variables \n\n\n### Consolidation: should be no surprises here\n\n\n### Task 7 -- Create a scatterplot to examine the association between some variables \n\n#### hint: Task 7 -- We are working with `geom_point()` and you need x and y aesthetic mappings.\n#### hint: Task 7 -- The outcome variable `mean.acc` has to be mapped to the y-axis using `...y = ...`\n\nRun a chunk of code to make the plot.\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-11_9f67e3925e1bbea9cbebaca0152a4978'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThis plot shows:\n\n- the possible association between x-axis variable `SHIPLEY` and y-axis \nvariable `mean.acc`.\n\nThe plot code moves through the following steps:  \n\n1. `ggplot(...)` make a plot;\n2. `ggplot(data = study.one.gen, ...)` with the `study.one.gen` dataset;\n3. `ggplot(...aes(x = SHIPLEY, y = mean.acc))` using two aesthetic mappings\n\n- `x = SHIPLEY` map `SHIPLEY` values to x-axis (horizontal, left to right) \npositions;\n- `y = mean.acc` map `mean.acc` values to y-axis (vertical, bottom to top) \npositions;\n\n4. `geom_point()` show the mappings as points.\n\n\n### Revise: make sure you are confident about doing these things\n\n\n### Task 8 -- Edit the appearance of *each* plot step-by-step\n\nWe are going to revise making edits to:\n\n1. the appearance of the points using `alpha`, `size`, `shape`, and `colour`;\n2. the colour of the background using `theme_bw()`;\n3. the appearance of the labels using `labs()`.\n\nWe are then going to try out some new moves:\n\n4. Set the x-axis and y-axis limits to the potential minimum-maximum ranges of \nthe variables we plot.\n\nHere, \"potential\" references the fact that e.g. `SHIPLEY` scores can\nstart at 0 (a person gets 0 responses correct) and has a maximum of 40\n(a person could get all responses correct, for up to 40 items).\n\n#### Task 8.1. Edit the appearance of the points using `alpha`, `size`, `shape`, and `colour`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-12_d76fd91c6936ba1403e93db2d5404faf'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point(alpha = 0.5, size = 2, colour = \"blue\", shape = \"square\") \n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n#### Task 8.2. Edit the colour of the background using `theme_bw()`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-13_818fe67ddf1845c6f21e6c62807ca23e'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point(alpha = 0.5, size = 2, colour = \"blue\", shape = \"square\")   +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n#### Task 8.3. Edit the appearance of the labels using `labs()`:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-14_0c515289ad150bae42d38b8619044a59'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point(alpha = 0.5, size = 2, colour = \"blue\", shape = \"square\")   +\n  theme_bw() +\n  labs(x = \"SHIPLEY\", y = \"mean accuracy\")\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Introduce: make some new moves\n\n\n#### Task 8.4. Set the axis limits:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-15_27a61b59a9b11224577e6ce8424a1ef3'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point(alpha = 0.5, size = 2, colour = \"blue\", shape = \"square\")   +\n  theme_bw() +\n  labs(x = \"SHIPLEY\", y = \"mean accuracy\") +\n  xlim(0, 40) + ylim(0, 1)\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotice that I set the x-axis limits to the minimum (0) and maximum (40) possible values\nfor the `SHIPLEY` variable.\n- I set the y-axis limits to the minimum (0) and maximum (1) possible values\nfor the mean accuracy variable `mean.acc`.\n\n#### Why are we learning how to do this?\n\nIt is generally a good idea to show the minimum value (the origin) for each variable.\nNot doing this i.e. showing a more narrow slice of the sample range is an easy way to \n*exaggerate* the strength of associations or to *imply incorrectly* the breadth in variation.\n\nYou can change the transparency (alpha), size, colour and shape of important parts of a plot.\n\n- Here, we are changing the appearance of the points.\n- But you can also change the transparency (alpha), size, colour and shape of reference lines\nadded to a plot.\n\nThe ggplot `geom_point() `reference information is here: \n\n<https://ggplot2.tidyverse.org/reference/geom_point.html>\n\n- where you can see some examples of the edits we have done.\n\nSome useful information about shape options is here:\n\n<http://www.cookbook-r.com/Graphs/Shapes_and_line_types/>\n\nSome useful information about colourons is here:\n\n<http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/>\n\n\n### Now experiment!\n\n\n## Step 5: Use a linear model to to answer the research questions\n\n\n### Introduce: Make some new moves\n\n\nOne of our research questions is:\n\n1. What person attributes predict success in understanding?\n\n### Task 9 -- Examine the relation between outcome mean accuracy (`mean.acc`) and the predictor variable: vocabulary (`SHIPLEY`)\n\n#### hint: Task 9 -- We use `lm()`\n\nFit the model and get a summary of the model statistics.\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-16_9efa182a283b53c088652eb958e808d9'}\n\n```{.r .cell-code}\nmodel <- lm(mean.acc ~ SHIPLEY, data = study.one.gen)\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mean.acc ~ SHIPLEY, data = study.one.gen)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.42871 -0.04921  0.02079  0.07480  0.18430 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.44914    0.08053   5.577 9.67e-08 ***\nSHIPLEY      0.01050    0.00229   4.585 8.85e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1115 on 167 degrees of freedom\nMultiple R-squared:  0.1118,\tAdjusted R-squared:  0.1065 \nF-statistic: 21.03 on 1 and 167 DF,  p-value: 8.846e-06\n```\n:::\n:::\n\n\nNotice that we do the linear model in the steps:\n\n1. `model <- lm(...)` fit the model using `lm(...)`, give the model a name \n-- here, we call it \"model\";\n2. `...lm(mean.acc ~ SHIPLEY...)` tell R you want a model of the outcome \n`mean.acc` predicted (`~`) by the predictor `SHIPLEY`;\n3. `...data = study.one.gen)` tell R that the variables you name in the \nformula live in the `study.one.gen` dataset;\n4. `summary(model)` ask R for a summary of the model you called \"model\".\n\nNotice: R has a general formula syntax: `outcome ~ predictor` *or* `y ~ x`\n\n- and uses the same format across a number of different functions;\n- each time, the left of the tilde symbol `~` is some output or outcome;\n- and the right of the tilde `~` is some input or predictor or set of predictors.\n\n#### Questions: Task 9\n\nIf you look at the model summary you can answer the following questions.\n\n- Q.5. What is the estimate for the coefficient of the effect of the predictor, \n`SHIPLEY`?\n\n- A.5. 0.01050 \n\n- Q.6. Is the effect significant?\n\n- A.6. It is significant, p < .05\n\n- Q.7. What are the values for t and p for the significance test for the \ncoefficient?\n\n- A.7. t = 4.585, p = 8.85e-06\n\n- Q.8. What do you conclude is the answer to the research question, \ngiven the linear model results?\n\n- A.8. The model slope estimate suggests that as `SHIPLEY` scores increase \nso `mean.acc` scores increase also.\n\n\n## Step 6: Use a linear model to generate predictions \n\n\n### Introduce: make some new moves\n\n\n### Task 10 -- We can use the model we have just fitted to plot the model predictions\n\n#### hint: Task 10 -- We are going to draw a scatterplot and add a line \n\nThe line will show the model predictions, given the model intercept and effect coefficient estimates.\n\nFirst fit a model and get a summary: model the relationship between `mean.acc` and `SHIPLEY`\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-17_c7544fbfd3496ff14e9d9efd4fe2c05a'}\n\n```{.r .cell-code}\nmodel <- lm(mean.acc ~ SHIPLEY, data = study.one.gen)\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mean.acc ~ SHIPLEY, data = study.one.gen)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.42871 -0.04921  0.02079  0.07480  0.18430 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.44914    0.08053   5.577 9.67e-08 ***\nSHIPLEY      0.01050    0.00229   4.585 8.85e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1115 on 167 degrees of freedom\nMultiple R-squared:  0.1118,\tAdjusted R-squared:  0.1065 \nF-statistic: 21.03 on 1 and 167 DF,  p-value: 8.846e-06\n```\n:::\n:::\n\n\n- Q.9. What is the coefficient estimate for the intercept?\n\n- A.9. 0.44914\n\n- Q.10. What is the coefficient estimate for the slope of `SHIPLEY`?\n\n- A.10. 0.01050\n\nSecond, use the `geom_abline()` function to draw the line:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-18_603c3cb17a4fea5543c2825ec69b2de0'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point(alpha = 0.5, size = 2, colour = \"blue\", shape = \"square\")   +\n  geom_abline(intercept = 0.44914, slope = 0.01050, colour = \"red\", size = 1.5) +\n  theme_bw() +\n  labs(x = \"SHIPLEY\", y = \"mean accuracy\") +\n  xlim(0, 40) + ylim(0, 1)\n```\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nYou can see that what we do is:\n\n- add the `geom_abline(...)` function;\n- and into that function code, we add information about the intercept and the slope\nwhich we take from the model summary.\n\nYou can see reference information here:  \n\n<https://ggplot2.tidyverse.org/reference/geom_abline.html>      \n\nNote that we can get the prediction line drawn for us automatically, as:\n\n\n::: {.cell hash='2023-24-PSYC122-w17-how-to_cache/html/unnamed-chunk-19_29996839d8be9a8c22e5a8f7f0eb063b'}\n\n```{.r .cell-code}\nggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  # geom_point(alpha = 0.5, size = 2, colour = \"blue\", shape = `square`)   +\n  geom_smooth(method = \"lm\", colour = \"purple\", alpha = .2, size = 2.5, se = FALSE) +\n  geom_abline(intercept = 0.44914, slope = 0.01050, colour = \"red\", size = 1) +\n  theme_bw() +\n  labs(x = \"SHIPLEY\", y = \"mean accuracy\") +\n  xlim(0, 40) + ylim(0, 1)  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](2023-24-PSYC122-w17-how-to_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n- Here, I turned the points off by commenting them out, adding # to the start of the line.\n- And I added `geom_smooth(method = \"lm\", ...)` to draw a prediction line.\n- You can compare the red prediction line I drew using the model estimates\n- with the purple line I used geom_smooth() to draw automatically to see that they are identical\n\nThis shows you something of what geom_smooth() does.\nIt is very useful:\n\n<https://ggplot2.tidyverse.org/reference/geom_smooth.html>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}